import React from 'react';
export interface StyledLinkProps {
    containsIcon?: boolean;
    secondary?: boolean;
    tertiary?: boolean;
    nochrome?: boolean;
    inverse?: boolean;
}
declare const StyledLink: import("@storybook/theming").StyledComponent<{
    theme?: import("@storybook/theming").Theme;
    as?: React.ElementType<any>;
} & StyledLinkProps, React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, {}>;
/**
 * Links can contains text and/or icons. Be careful using only icons, you must provide a text alternative via aria-label for accessibility.
 */
export type LinkProps = React.ComponentProps<typeof StyledLink> & {
    withArrow?: boolean;
    isButton?: boolean;
    LinkWrapper?: React.ComponentType<any>;
};
export declare const Link: React.ForwardRefExoticComponent<Pick<{
    theme?: import("@storybook/theming").Theme;
    as?: React.ElementType<any>;
} & StyledLinkProps & React.ClassAttributes<HTMLAnchorElement> & React.AnchorHTMLAttributes<HTMLAnchorElement> & {
    children?: React.ReactNode;
} & {
    withArrow?: boolean;
    isButton?: boolean;
    LinkWrapper?: React.ComponentType<any>;
}, "key" | "theme" | "as" | keyof React.AnchorHTMLAttributes<HTMLAnchorElement> | "isButton" | "LinkWrapper" | "withArrow" | keyof StyledLinkProps> & React.RefAttributes<HTMLAnchorElement | HTMLButtonElement>>;
export {};
//# sourceMappingURL=Link.d.ts.map