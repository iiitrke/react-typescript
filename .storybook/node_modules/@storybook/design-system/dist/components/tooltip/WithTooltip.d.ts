import React, { ReactNode, ComponentProps } from 'react';
import TooltipTrigger from 'react-popper-tooltip';
declare const AsComponent: React.ForwardRefExoticComponent<Pick<Pick<WithTooltipProps, "tagName"> & Record<string, any>, string> & React.RefAttributes<unknown>>;
interface WithTooltipProps {
    tagName?: keyof JSX.IntrinsicElements;
    trigger?: ComponentProps<typeof TooltipTrigger>['trigger'];
    closeOnClick?: boolean;
    placement?: ComponentProps<typeof TooltipTrigger>['placement'];
    modifiers?: any;
    hasChrome?: boolean;
    tooltip?: ReactNode | Function;
    children: ReactNode;
    startOpen?: boolean;
    delayHide?: number;
    delayShow?: number;
    onVisibilityChange?: Function;
    portalContainer?: ComponentProps<typeof TooltipTrigger>['portalContainer'];
    tooltipZIndex?: number;
}
declare const WithTooltip: ({ children, closeOnClick, delayHide, delayShow, hasChrome, modifiers, onVisibilityChange, placement, portalContainer, startOpen, tagName, tooltip, tooltipZIndex, trigger, ...props }: WithTooltipProps & ComponentProps<typeof AsComponent>) => JSX.Element;
export default WithTooltip;
//# sourceMappingURL=WithTooltip.d.ts.map