import React, { ComponentProps, ReactNode } from 'react';
declare const ItemInner: import("@storybook/theming").StyledComponent<{
    theme?: import("@storybook/theming").Theme;
    as?: React.ElementType<any>;
}, React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>, {}>;
interface LinkStyleProps {
    activeColor: string;
    active?: boolean;
    isLoading?: boolean;
    disabled?: boolean;
}
declare const buildStyledLinkWrapper: import("@emotion/weak-memoize").UnaryFn<LinkWrapperType, import("@storybook/theming").StyledComponent<AnyProps & LinkStyleProps & {
    theme?: import("@storybook/theming").Theme;
}, {}, {}>>;
type StyledLinkWrapperProps = ComponentProps<ReturnType<typeof buildStyledLinkWrapper>>;
interface ListItemProps {
    appearance?: 'primary' | 'secondary';
    isLoading?: boolean;
    left?: ReactNode;
    title?: ReactNode;
    center?: ReactNode;
    right?: ReactNode;
    active?: boolean;
    disabled?: boolean;
    LinkWrapper?: LinkWrapperType | null;
    onClick?: ComponentProps<typeof ItemInner>['onClick'];
}
export declare const ListItem: ({ appearance, left, title, center, right, onClick, LinkWrapper, ...rest }: ListItemProps & Omit<StyledLinkWrapperProps, 'activeColor'>) => JSX.Element;
type AnyProps = Record<string, any>;
type LinkWrapperType = (props: AnyProps) => React.ReactElement<any, any>;
export {};
//# sourceMappingURL=ListItem.d.ts.map