import React, { ComponentProps } from 'react';
import { TooltipArg } from 'react-popper-tooltip';
type Placement = TooltipArg['placement'];
interface ArrowProps {
    'data-placement': Placement;
    isVisible: boolean;
}
interface WrapperProps {
    'data-placement': Placement;
    zIndex: number;
    hasChrome: boolean;
    hidden: boolean;
}
declare const Arrow: import("@storybook/theming").StyledComponent<{
    theme?: import("@storybook/theming").Theme;
    as?: React.ElementType<any>;
} & ArrowProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
declare const TooltipWrapper: import("@storybook/theming").StyledComponent<{
    theme?: import("@storybook/theming").Theme;
    as?: React.ElementType<any>;
} & WrapperProps, React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
interface TooltipProps {
    hasChrome?: boolean;
    arrowProps?: ComponentProps<typeof Arrow>;
    placement?: Placement;
    arrowRef?: any;
    tooltipRef?: any;
    zIndex?: number;
}
export declare const Tooltip: ({ placement, hasChrome, children, arrowProps, tooltipRef, arrowRef, zIndex, ...props }: TooltipProps & Omit<ComponentProps<typeof TooltipWrapper>, keyof TooltipProps | 'data-placement' | 'ref' | 'zIndex'>) => JSX.Element;
export {};
//# sourceMappingURL=Tooltip.d.ts.map